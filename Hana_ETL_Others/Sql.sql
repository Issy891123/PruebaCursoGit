
SELECT *
--DELETE
FROM COLSUBSIDIO_IDN.TBL_CAM_COMERCIO_CONSOLIDADA
WHERE EXTRACT (MONTH FROM FECHA_ACT) = 6 AND EXTRACT (YEAR FROM FECHA_ACT) = 2024
AND "Tipo_Identific" LIKE '%N%'
;

SELECT 
	"Categoria" , COUNT(*)
FROM COLSUBSIDIO_IDN.TBL_CAM_COMERCIO_CONSOLIDADA
WHERE EXTRACT (MONTH FROM FECHA_ACT) = 6 AND EXTRACT (YEAR FROM FECHA_ACT) = 2024  
GROUP BY "Categoria" 
;

SELECT * FROM COLSUBSIDIO_IDN.TBL_EMP_DATOS_ABIERTOS;

SELECT "fecha_archivo" AS DIA_HABIL, "fecha_recaudo" AS "REAL",  ROUND(sum(TO_BIGINT("valor_planilla")) / 1000000, 0) AS VALOR
FROM COLSUBSIDIO_IDN.TBL_RECAUDO_HISTORICO
WHERE EXTRACT (YEAR FROM "fecha_archivo") = 2023 AND EXTRACT (MONTH FROM "fecha_archivo") = 04
GROUP BY "fecha_archivo", "fecha_recaudo"
ORDER BY "fecha_recaudo"
;

SELECT DISTINCT "fecha_archivo", "fecha_recaudo", 
	SUM(TO_BIGINT("valor_planilla")) / 1000000 AS VALOR_PLANILLA,
	COUNT(*) AS CANTIDAD
--DELETE
FROM COLSUBSIDIO_IDN.TBL_RECAUDO_HISTORICO
--WHERE "fecha_recaudo" = '2023-04-10 00:00:00'
GROUP BY "fecha_archivo", "fecha_recaudo"
ORDER BY "fecha_archivo" DESC
;


UPDATE COLSUBSIDIO_IDN.TBL_RECAUDO_HISTORICO 
SET "fecha_recaudo" = '2024-04-29 00:00:00' --, "fecha_recaudo" = '2024-04-27 00:00:00'
WHERE EXTRACT (YEAR FROM "fecha_archivo") = 2024
	AND EXTRACT (MONTH FROM "fecha_archivo") = 4
	AND EXTRACT (DAY FROM "fecha_archivo") = 21
;

SELECT * FROM COLSUBSIDIO_IDN.TBL_AFILIADOS_SEGM
WHERE SEG_NOMBRE LIKE 
WHERE YEAR_EVENT || MES = 202212
OR YEAR_EVENT = 2023
;


SELECT * 
FROM COLSUBSIDIO_IDN.tbl_variables_vitales_segm
WHERE EXTRACT (MONTH FROM FECHA) >= 7
	AND EXTRACT (YEAR FROM FECHA) = 2023
ORDER BY FECHA
;

SELECT ACTIVO, COUNT(*)
--DELETE
FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BETTERFLY_VAL thb 
GROUP BY ACTIVO
--WHERE MES LIKE '%2024-02-27%'
;

SELECT EXTRACT (YEAR FROM FECHA_REPORTADO) || EXTRACT (MONTH FROM FECHA_REPORTADO) AS MES,
	COUNT(*)
FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BAJAS_BETTERFLY
GROUP BY EXTRACT (YEAR FROM FECHA_REPORTADO) || EXTRACT (MONTH FROM FECHA_REPORTADO)
;


CREATE TABLE COLSUBSIDIO_IDN.TBL_CONVERSION_PIRAMIDE_SEGM (
	"CODIGO_PIRAMIDE_2" INTEGER,
	"CODIGO_PIRAMIDE_1" INTEGER,
	"PIRAMIDE_2" NVARCHAR(250),
	PRIMARY KEY (CODIGO_PIRAMIDE_2)
)UNLOAD PRIORITY 5 AUTO MERGE;
;

SELECT * FROM COLSUBSIDIO_IDN.TBL_CONVERSION_PIRAMIDE_SEGM;

/*===============================================================================================*/
/*=========================== VALIDACIONES BETTERFLY ============================================*/
/*===============================================================================================*/

-- PAra validar cuántos registros se cargaron

WITH CTE AS (
	SELECT LEFT(MES, 10) AS MES, 
	RAZON_SOCIAL, 
	ID_EMP_FILIAL, 
	COUNT(*) AS CANT
	FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BETTERFLY_VAL 
	--WHERE MES >= TO_TIMESTAMP('2023-10-01 20:45:04.315', 'YYYY-MM-DD HH24:MI:SS.FF3')
		--AND CORREO_ELECTRONICO_1 LIKE '%@%'
	GROUP BY 
	RAZON_SOCIAL, 
	ID_EMP_FILIAL, 
	MES
	ORDER BY MES DESC 
)
SELECT MES, 
	RAZON_SOCIAL, 
	ID_EMP_FILIAL,
	SUM(CANT)
FROM CTE
--WHERE MES LIKE '%2024-05-15%'
WHERE ID_EMP_FILIAL IN ('NIT9006825438')
GROUP BY MES
	, RAZON_SOCIAL
	, ID_EMP_FILIAL
ORDER BY MES DESC
;


SELECT * FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BAJAS_BETTERFLY
WHERE NUMERO_DOCUMENTO_AFILIADO = '52236554'
WHERE EXTRACT (MONTH FROM FECHA_REPORTADO) = 4
ORDER BY FECHA_REPORTADO DESC
;


-- PAra validar cuántos registros de bajas se cargaron
WITH CTE AS (
	SELECT
		EXTRACT (YEAR FROM FECHA_REPORTADO) || EXTRACT(MONTH FROM FECHA_REPORTADO) AS MES, 
		--RAZON_SOCIAL, 
		ID_EMP_FILIAL, 
		COUNT(*) AS CANT
	FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BAJAS_BETTERFLY 
	--WHERE MES >= TO_TIMESTAMP('2023-10-01 20:45:04.315', 'YYYY-MM-DD HH24:MI:SS.FF3')
		--AND CORREO_ELECTRONICO_1 LIKE '%@%'
	GROUP BY 
	--RAZON_SOCIAL, 
	ID_EMP_FILIAL, 
	EXTRACT (YEAR FROM FECHA_REPORTADO) || EXTRACT(MONTH FROM FECHA_REPORTADO)
	ORDER BY MES DESC 
)
SELECT MES, 
	ID_EMP_FILIAL, 
	SUM(CANT)
FROM CTE
--WHERE MES LIKE '%2024-05%'
WHERE ID_EMP_FILIAL = 'NIT9006825438'
GROUP BY MES
	, ID_EMP_FILIAL
ORDER BY MES DESC
;


SELECT ID_EMP_FILIAL, RAZON_SOCIAL, MES, COUNT(*) 
FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BETTERFLY_VAL
WHERE ID_EMP_FILIAL IN ('NIT8001069629',
'NIT8300658425',
'NIT8002509269')
GROUP BY ID_EMP_FILIAL, RAZON_SOCIAL, MES
ORDER BY MES
;

SELECT * FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BETTERFLY_VAL
--ORDER BY MES DESC
WHERE NUMERO_DOCUMENTO_AFILIADO  = '79589768'
;

SELECT
ID_EMP_FILIAL,TIPO_DOCUMENTO_AFILAIDO,NUMERO_DOCUMENTO_AFILIADO,PRIMER_APELLIDO,SEGUNDO_APELLIDO,NOMBRE_COMPLETO,FECHA_NACIMIENTO,GENERO,ID_PERSONA,RAZON_SOCIAL,RANGO_EDAD,CATEGORIA,SEGMENTO_POBLACIONAL,MES,ACTIVO
FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BETTERFLY_VAL
WHERE MES LIKE '%2024-01-29%'
;

-- Query de actualización personas retiradas. Se usa para betterfly
UPDATE COLSUBSIDIO_IDN.TBL_HISTORIAL_BETTERFLY_VAL HB 
	SET ACTIVO = COALESCE(
	    (SELECT 
	        CASE 
	            WHEN CS.NUMERO_DOCUMENTO_AFILIADO IS NOT NULL THEN 1
	            ELSE 0 
	        END AS DOC_VAL 
	    FROM (
	        SELECT 
	            CS.NUMERO_DOCUMENTO_AFILIADO,
	            ROW_NUMBER() OVER (ORDER BY NUMERO_DOCUMENTO_AFILIADO) AS RN
	        FROM COLSUBSIDIO_IDN.V_CONSOLIDACION_SEGM CS	 
	        WHERE HB.NUMERO_DOCUMENTO_AFILIADO = CS.NUMERO_DOCUMENTO_AFILIADO
	        	AND HB.ID_EMP_FILIAL = CS.ID_EMPRESA 
	    ) AS CS
	    WHERE CS.RN = 1),
	    0
	);
	
SELECT * FROM COLSUBSIDIO_IDN.V_CONSOLIDACION_SEGM;

-- Query para extraer las bajas de las empresas reportadas a betterfly
SELECT 
    HB.ACTIVO, 
    HBB.FECHA_REPORTADO,
    --HB.MES,
    HB.ID_EMP_FILIAL, HB.TIPO_DOCUMENTO_AFILAIDO, HB.NUMERO_DOCUMENTO_AFILIADO,
    HB.PRIMER_APELLIDO, HB.SEGUNDO_APELLIDO, HB.NOMBRE_COMPLETO, HB.CORREO_ELECTRONICO_1,
    HB.FECHA_NACIMIENTO, HB.GENERO,TELEFONO_CELULAR_1     
FROM COLSUBSIDIO_IDN.TBL_HISTORIAL_BETTERFLY_VAL HB
LEFT JOIN COLSUBSIDIO_IDN.TBL_HISTORIAL_BAJAS_BETTERFLY hbb 
    ON HB.ID_EMP_FILIAL = HBB.ID_EMP_FILIAL 
    AND HB.NUMERO_DOCUMENTO_AFILIADO = HBB.NUMERO_DOCUMENTO_AFILIADO 
WHERE HB.ACTIVO = 1
    --AND HB.ID_EMP_FILIAL = 'NIT8600232471'
    AND HBB.FECHA_REPORTADO IS NOT NULL
;

/* ================================== Para facturación BETTERFLY =======================================================*/

WITH CTE AS (
	SELECT FB.*,
		HB.CATEGORIA,
		HB.MES,
		BB.FECHA_REPORTADO AS EN_BAJAS		
	FROM COLSUBSIDIO_IDN.TBL_BETTERFLY_PARA_FACTURACION FB
	LEFT JOIN COLSUBSIDIO_IDN.TBL_HISTORIAL_BETTERFLY_VAL HB
		ON FB.ID_PERSONAL || 'NIT' || FB.NIT = HB.NUMERO_DOCUMENTO_AFILIADO || HB.ID_EMP_FILIAL 
	LEFT JOIN COLSUBSIDIO_IDN.TBL_HISTORIAL_BAJAS_BETTERFLY BB
		ON FB.ID_PERSONAL || 'NIT' || FB.NIT = BB.NUMERO_DOCUMENTO_AFILIADO || BB.ID_EMP_FILIAL
	WHERE FB.FECHA_CARGUE = '14-08-2024'
		--AND  FB.ID_PERSONAL = '79589768'
	ORDER BY FB.ID_PERSONAL, CATEGORIA
)
, Conrepeticiones AS (
	SELECT CTE.ORGANIZATION
		,CTE.ID_PERSONAL
		,CTE.ID_TYPE
		,CTE.FIRST_NAME
		,CTE.LAST_NAME
		,CTE.DATE_ONBOARDING
		,CTE.ID_COMPANY
		,CTE.RAZON_SOCIAL
		,CTE.NIT
		,CASE WHEN CTE.CATEGORIA IS NULL THEN AF.CATEGORIA ELSE CTE.CATEGORIA END AS CATEGORIA
		,CASE WHEN CTE.MES IS NULL THEN 'NO HA SIDO CARGADO' ELSE 'CARGADO' END AS MES_CARGA
		,CASE
			WHEN CTE.EN_BAJAS IS NULL THEN 'EN BAJAS: NO' ELSE 'EN BAJAS: SI'
		END AS EN_BAJAS
		,CASE 
			WHEN AF.ID_EMPRESA IS NULL THEN 'SIN REGISTRO EN SEGMENTACION'
			ELSE 'AFILIADO EN: ' || AF.ID_EMPRESA || ' = ' || AF.RAZON_SOCIAL
		END	AS AFILIADO_EN,
		ROW_NUMBER () OVER (PARTITION BY CTE.ID_PERSONAL, CTE.NIT
			ORDER BY CTE.ID_PERSONAL, CTE.NIT) AS REPETICIONES
		,CTE.EN_BAJAS AS FECHA_DE_BAJA
	FROM CTE
	LEFT JOIN COLSUBSIDIO_IDN.V_CONSOLIDACION_SEGM AF
		ON CTE.ID_PERSONAL = AF.NUMERO_DOCUMENTO_AFILIADO	
	--WHERE CTE.ID_PERSONAL = '79589768'
	--WHERE CTE.CATEGORIA IS NULL
)
	SELECT ORGANIZATION, ID_PERSONAL, ID_TYPE, FIRST_NAME, LAST_NAME, DATE_ONBOARDING
		,ID_COMPANY, RAZON_SOCIAL, NIT, CATEGORIA, MES_CARGA, EN_BAJAS
		, CASE
			WHEN AFILIADO_EN = 'SIN REGISTRO EN SEGMENTACION' THEN 'NO EXISTE EN SEGM' ELSE 'AFILIADO'
		END AS VAL_AFILIADO
		,AFILIADO_EN
		,REPETICIONES
		,FECHA_DE_BAJA
	FROM Conrepeticiones fnal
	WHERE fnal.REPETICIONES = 1
;


--ALTER TABLE COLSUBSIDIO_IDN.TBL_BETTERFLY_PARA_FACTURACION ADD (FECHA_CARGUE NVARCHAR(10));

--UPDATE COLSUBSIDIO_IDN.TBL_BETTERFLY_PARA_FACTURACION SET FECHA_CARGUE = '03-07-2024'
--WHERE FECHA_CARGUE = '3-7-2024'
--;

SELECT * --FECHA_CARGUE, COUNT(*) AS CANT
FROM COLSUBSIDIO_IDN.TBL_BETTERFLY_PARA_FACTURACION
WHERE FECHA_CARGUE = '03-07-2024'
GROUP BY FECHA_CARGUE 
ORDER BY 1
; 

UPDATE COLSUBSIDIO_IDN.TBL_BETTERFLY_PARA_FACTURACION SET NIT = 'NIT'||NIT
WHERE NIT NOT LIKE '%NIT%';

SELECT 'NIT' || NIT 
FROM COLSUBSIDIO_IDN.TBL_BETTERFLY_PARA_FACTURACION
WHERE NIT NOT LIKE '%NIT%';

SELECT * FROM COLSUBSIDIO_IDN.V_CONSOLIDACION_SEGM
WHERE NUMERO_DOCUMENTO_AFILIADO = '79589768'
;

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------


/* ------------------------------------------------------------------------------------------------------- */
/* -----------------------------INICIO para automatización tablero fuga ------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------- */

SELECT * FROM COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_SF;

SELECT * FROM COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF
WHERE "Última Carta de Riesgo Recibida" <> 'Retracto'
;

-- Cruzar con histórico paz y salvos (Falta cargar)
-- Lo que no cruce debo anexarlo a la tabla de paz y salvo total o histórico
-- Actualizar estado de afiliación del historial con el estado de afiliación del archivo que se descarga

INSERT INTO COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF 
WITH FILTRO_BASE_DESC AS (
	SELECT 
		ESTADO_DE_AFILIACION,
		IDENTIFICADOR_UNICO_EMPRESAS,
		NOMBRE_DE_LA_CUENTA,
		"CUENTA_PRINCIPAL:_NOMBRE_DE_LA_CUENTA",
		SEGMENTO_1RA_PIRAMIDE_REAL,SEGMENTO_2DA_PIRAMIDE_REAL,
		"PROPIETARIO_DE_LA_CUENTA:_NOMBRE_COMPLETO",
		JEFE_INMEDIATO,NOMBRE_DE_GESTION_DE_RIESGO_1,
		ULTIMA_CARTA_DE_RIESGO_RECIBIDA,
		 CASE 
		 	WHEN TO_INTEGER(SUBSTRING(FECHA_RADICACION_ULTIMA_CARTA_RECIBIDA,1,1)) <= 9 AND SUBSTRING(FECHA_RADICACION_ULTIMA_CARTA_RECIBIDA,2,1) = '/'
		 		THEN '0' || SUBSTRING(FECHA_RADICACION_ULTIMA_CARTA_RECIBIDA,1,1) || SUBSTRING(FECHA_RADICACION_ULTIMA_CARTA_RECIBIDA,2,8)
		 		ELSE FECHA_RADICACION_ULTIMA_CARTA_RECIBIDA
		 END AS FECHA_RADICACION_ULTIMA_CARTA_RECIBIDA, 
		 REMANENTE_NETO_PROMEDIO_NUEVO_MODELO,
		 APORTE_NETO_PROMEDIO_NUEVO_MODELO,
		 FECHA_RADICACION_CARTA_RETIRO,		 
		 FECHA_RADICACION_PAZ_Y_SALVO,
		 CALIFICACION_DEL_RIESGO,		 
		 ESTADO_GESTION_RETIRO,
		 FECHA_DE_AFILIACION,
		 CENTRO_SERVICIOS_RADICACION,
		 FECHA_DE_RETIRO,
		 FECHA_VENCIMIENTO_CARTA,
		 JEFE_DEPARTAMENTO,
		 CLUSTER_EMPRESARIAL_GRUPO,
		 FECHA_DE_CREACION,		 
		 CANAL
	FROM COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_SF
	WHERE --FECHA_CARGUE = (SELECT MAX(FECHA_CARGUE) FROM COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_SF) AND
		FECHA_RADICACION_PAZ_Y_SALVO LIKE '%/2024%' AND
		FECHA_RADICACION_RETRACTO = '0' AND
	 	ULTIMA_CARTA_DE_RIESGO_RECIBIDA = 'Paz y Salvo'
)
SELECT BD.*	
FROM FILTRO_BASE_DESC BD
LEFT JOIN COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF HF
	ON BD.IDENTIFICADOR_UNICO_EMPRESAS || BD.FECHA_RADICACION_ULTIMA_CARTA_RECIBIDA = HF."Identificador Único Empresas" || HF."Fecha Radicación Ultima Carta Recibida"
WHERE HF."Identificador Único Empresas" || HF."Fecha Radicación Ultima Carta Recibida" IS NULL
;

------------------------------------------------------------------
-- Eliminar retractos, revisando por el campo Ultima carta de riesgo recibida = Retracto y año = al año actual

UPDATE COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF
SET "Última Carta de Riesgo Recibida" = 'Retracto'
WHERE "Identificador Único Empresas" IN 
(
	WITH BD AS (
	SELECT 
		IDENTIFICADOR_UNICO_EMPRESAS,
		ULTIMA_CARTA_DE_RIESGO_RECIBIDA,
		FECHA_RADICACION_RETRACTO
	FROM COLSUBSIDIO_IDN."TBL_PAZYSALVOS_FUGA_SF"
	WHERE TBL_PAZYSALVOS_FUGA_SF.ULTIMA_CARTA_DE_RIESGO_RECIBIDA LIKE '%Retracto%'
		AND FECHA_RADICACION_RETRACTO LIKE '%/2024%'
	)
	SELECT DISTINCT BD.IDENTIFICADOR_UNICO_EMPRESAS 
	FROM BD
	INNER JOIN COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF HF
		ON BD.IDENTIFICADOR_UNICO_EMPRESAS = HF."Identificador Único Empresas"
)
;

-------------Actualizar estado de afiliación del archivo descargado-------------------------

UPDATE COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF A
SET "Estado de Afiliación" = COALESCE(
	(SELECT  
		DISTINCT B.ESTADO_DE_AFILIACION
	FROM COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_SF B
	WHERE A."Identificador Único Empresas" = B.IDENTIFICADOR_UNICO_EMPRESAS
	), A."Estado de Afiliación")
;



/*UPDATE COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF A
SET "Estado de Afiliación" = 'Al dia'
WHERE "Identificador Único Empresas" IN ()
;
*/

SELECT --TBH."Identificador Único Empresas", 
	TBH."Estado de Afiliación",
	--TB.ESTADO_DE_AFILIACION,
	COUNT(*)
FROM COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF TBH
LEFT JOIN COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_SF TB
 ON TBH."Identificador Único Empresas"  = TB.IDENTIFICADOR_UNICO_EMPRESAS 
GROUP BY --TBH."Identificador Único Empresas", 
	TBH."Estado de Afiliación"
	--,TB.ESTADO_DE_AFILIACION
ORDER BY 2 DESC
;


SELECT * 
FROM COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_HISTORIAL_SF
WHERE "Identificador Único Empresas" IN ('NIT9015216493',
'NIT8301361233',
'CC10009235',
'NIT8605263139',
'NIT9004743723',
'CC17307275',
'NIT9006307614',
'NIT9013544666',
'NIT9004262738')
;


/* ------------------------------------------------------------------------------------------------------- */
/* ---------------------------------------- FINAL PROCESO FUGA ------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------- */


/* ------------------------------------------------------------------------------------------------------- */
/* ---------------------------------------- INICIO PROCESO EVENTOS ------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------- */


SELECT *
FROM COLSUBSIDIO_IDN.TBL_HISTORICO_EMPRESAS_SEGM
WHERE ID_EMPRESA IN ('NIT9007235261', 'NIT8600689331')
;

SELECT * FROM COLSUBSIDIO_IDN.TBL_EVENTOS_EMPRESAS_SF;
SELECT DISTINCT NOMBRE_DE_EVENTO 
FROM COLSUBSIDIO_IDN.V_EVENTOS_FINAL
WHERE TO_VARCHAR(YEAR(MES_EJECUCION_DE_LA_ACCION)) = '2023'
;

CREATE OR REPLACE VIEW COLSUBSIDIO_IDN.V_EVENTOS_SF AS
	SELECT 
		"EVENTO_CORPORATIVO:_NOMBRE_DE_EVENTOS_CORPORATIVOS" AS EVENTO_CORPORATIVO,
		CEDULA_ASISTENTE,
		NOMBRE_ASISTENTE,
		EMPRESA_DEL_ASISTENTE,
		NOMBRE_DE_LA_CUENTA,
		NOMBRE_DE_EVENTO,
		CASE 
			WHEN SUBSTRING(MES_EJECUCION_DE_LA_ACCION, 1, 2) IN ('1/','2/','3/','4/','5/','6/','7/','8/','9/')
			THEN TO_DATE(SUBSTRING(MES_EJECUCION_DE_LA_ACCION, 6, 4) || '-' || SUBSTRING(MES_EJECUCION_DE_LA_ACCION, 3, 2) || '-0' || SUBSTRING(MES_EJECUCION_DE_LA_ACCION, 1, 1))				
			ELSE TO_DATE(SUBSTRING(MES_EJECUCION_DE_LA_ACCION, 7, 4) || '-' || SUBSTRING(MES_EJECUCION_DE_LA_ACCION, 4, 2) || '-' || SUBSTRING(MES_EJECUCION_DE_LA_ACCION, 1, 2))
		END	AS MES_EJECUCION_DE_LA_ACCION,
		RESUMEN_ASISTENTES,
		CARGO,		
		--TO_DATE(SUBSTRING("FECHA_CARGUE", 1, 10)) AS FECHA_CARGUE,
		'TBL_EVENTOS_ASISTENTES_SF'
	FROM COLSUBSIDIO_IDN.TBL_EVENTOS_ASISTENTES_SF
	--WHERE FECHA_CARGUE = (SELECT MAX(FECHA_CARGUE) FROM COLSUBSIDIO_IDN.TBL_EVENTOS_ASISTENTES_SF)
;


CREATE or replace VIEW COLSUBSIDIO_IDN.V_EVENTOS_FINAL AS 
	WITH CTE AS (
		SELECT 
		    A.*,
		    B.CATEGORIA,
		    B.CODIGO_SEGMENTO_POBLACIONAL, 
		    CASE 
		        WHEN B.CODIGO_SEGMENTO_POBLACIONAL = 1 THEN 'Basico' 
		        WHEN B.CODIGO_SEGMENTO_POBLACIONAL = 2 THEN 'Medio'
		        WHEN B.CODIGO_SEGMENTO_POBLACIONAL = 3 THEN 'Joven'
		        WHEN B.CODIGO_SEGMENTO_POBLACIONAL = 4 THEN 'Alto'
		        ELSE 'Sin Informacion'
		    END AS SEGMENTO_POBLACIONAL,
		    ROW_NUMBER () OVER (PARTITION BY A.CEDULA_ASISTENTE, A.EMPRESA_DEL_ASISTENTE, A.EVENTO_CORPORATIVO ORDER BY A.CEDULA_ASISTENTE, A.EMPRESA_DEL_ASISTENTE, A.EVENTO_CORPORATIVO) AS VAL,
		    CASE 
		    	WHEN TH.CODIGO_PIRAMIDE_1 = 1 THEN '1 Emp Grandes'
		    	WHEN TH.CODIGO_PIRAMIDE_1 = 2 THEN '2 Emp Medio'
		    	WHEN TH.CODIGO_PIRAMIDE_1 = 3 THEN '3 Empresas Pymes'
		    	WHEN TH.CODIGO_PIRAMIDE_1 = 4 THEN '4 Micro'
		    	WHEN TH.CODIGO_PIRAMIDE_1 = 5 THEN '5 Micro'
		    	WHEN TH.CODIGO_PIRAMIDE_1 = 6 THEN '6 Otros'
		    	ELSE 'SIN INFORMACION'
		    END	AS PIRAMIDE_1,	    
		    TH.PRIMAMIDE_NUEVA,
		    TH.RANKING_BA,
		    TH.CLUSTER_INDIVIDUAL
		FROM 
		    COLSUBSIDIO_IDN.V_EVENTOS_SF A	
		LEFT JOIN COLSUBSIDIO_DA.CV_IDN_TBL_AFILIADOS_HIST_SEGM B 
			ON A.CEDULA_ASISTENTE = B.ID_PERSONA 
		    AND MONTH(A.MES_EJECUCION_DE_LA_ACCION) = B.MES
		    AND YEAR(A.MES_EJECUCION_DE_LA_ACCION) = B.YEAR_EVENT
		LEFT JOIN COLSUBSIDIO_IDN.TBL_HISTORICO_EMPRESAS_SEGM TH
			ON A.EMPRESA_DEL_ASISTENTE = TH.ID_EMPRESA
			AND TO_VARCHAR(MONTH(A.MES_EJECUCION_DE_LA_ACCION)) = TO_VARCHAR(TH.MES)
			AND TO_VARCHAR(YEAR(A.MES_EJECUCION_DE_LA_ACCION)) = TO_VARCHAR(TH.ANIO)
	)
	SELECT * 
	FROM CTE
	WHERE VAL = 1
;


SELECT * FROM COLSUBSIDIO_IDN.V_EVENTOS_SF
WHERE CEDULA_ASISTENTE = 'CC1020738900'
;

SELECT * FROM COLSUBSIDIO_IDN.TBL_EVENTOS_ASISTENTES_SF
WHERE CEDULA_ASISTENTE = 'CC1020738900'
;

SELECT * FROM COLSUBSIDIO_IDN.V_EVENTOS_FINAL
WHERE CEDULA_ASISTENTE = 'CC1020738900'
;

SELECT *
FROM COLSUBSIDIO_DA.CV_IDN_TBL_AFILIADOS_HIST_SEGM
ORDER BY 1, 2
;

SELECT *
FROM COLSUBSIDIO_IDN.TBL_AFILIADOS_HIST_SEGM
ORDER BY 1, 2

SELECT * FROM COLSUBSIDIO_IDN.TBL_HISTORICO_EMPRESAS_SEGM;

	   
-------------------------------------------------------------------------------------------------------------
--======================================Query para BA Calculadora de aportes =============================================--
-------------------------------------------------------------------------------------------------------------
	   
SELECT 
	EXTRACT (YEAR FROM VV.FECHA) || EXTRACT (MONTH FROM VV.FECHA) AS FECHA,
	*
FROM COLSUBSIDIO_IDN.TBL_VARIABLES_VITALES_HIST_SEGM VV
--WHERE EXTRACT (YEAR FROM VV.FECHA) || EXTRACT (MONTH FROM VV.FECHA) = '20229'
;

SELECT 
	TO_VARCHAR(YEAR_EVENT) || TO_VARCHAR(MES) AS FECHA_AF,
	*
FROM COLSUBSIDIO_IDN.TBL_AFILIADOS_HIST_SEGM
WHERE ID_EMPRESA = 'CC1001185059';



CREATE OR REPLACE VIEW COLSUBSIDIO_IDN.V_TESTING_CALC_APORTES_BA AS
	WITH CTE AS (
		SELECT -- Query GENERAL con un ROW_NUMBER para eliminar duplicados
			VV.ID_EMPRESA,
			LE.RAZON_SOCIAL, 
			EXTRACT (YEAR FROM VV.FECHA) || EXTRACT (MONTH FROM VV.FECHA) AS FECHA_VAR_VITAL, 
			VV.APORTE, 
			VV.SUBSIDIO, 
			VV.REMANENTE_NETO, 
			VV.REMANENTE_BRUTO, 
			VV.NO_EMPLEADOS,			
			CAT.FECHA_AF,
			CAT.CategoriaA,
			CAT.CategoriaB,
			CAT.CategoriaC,
			CAT.TOTAL,		
			CASE WHEN CAT.TOTAL IS NULL OR CAT.TOTAL = 0 THEN 0 ELSE CAT.CATEGORIAA / TOTAL END AS PART_CAT_A,
			CASE WHEN CAT.TOTAL IS NULL OR CAT.TOTAL = 0 THEN 0 ELSE CAT.CATEGORIAB / TOTAL END AS PART_CAT_B,
			CASE WHEN CAT.TOTAL IS NULL OR CAT.TOTAL = 0 THEN 0 ELSE CAT.CATEGORIAC / TOTAL END AS PART_CAT_C,
			CAT.SalCategoriaA,
			CAT.SalCategoriaB,
			CAT.SalCategoriaC,
			CAT.TOTAL_SALARIOS,
			CASE WHEN CAT.CategoriaA IS NULL OR CAT.CategoriaA = 0 THEN 0 ELSE (CAT.SalCategoriaA / CAT.CategoriaA) END AS PROM_SALARIO_A,
			CASE WHEN CAT.CategoriaB IS NULL OR CAT.CategoriaB = 0 THEN 0 ELSE (CAT.SalCategoriaB / CAT.CategoriaB) END AS PROM_SALARIO_B,
			CASE WHEN CAT.CategoriaC IS NULL OR CAT.CategoriaC = 0 THEN 0 ELSE (CAT.SalCategoriaC / CAT.CategoriaC) END AS PROM_SALARIO_C,
			CASE WHEN CAT.TOTAL IS NULL OR CAT.TOTAL = 0 THEN 0 ELSE (CAT.TOTAL_SALARIOS / CAT.TOTAL) END AS PROM_SALARIOS,
			CAT.SEGM_BASICO,
			CAT.SEGM_MEDIO,
			CAT.SEGM_JOVEN,
			CAT.SEGM_ALTO,
			CAT.CODIGO_PIRAMIDE_2,
			LE.CIIU,
			LE.DESCRIPCIONCIIU,
			ROW_NUMBER() OVER (PARTITION BY VV.ID_EMPRESA, EXTRACT (YEAR FROM VV.FECHA) || EXTRACT (MONTH FROM VV.FECHA) ORDER BY VV.ID_EMPRESA, EXTRACT (YEAR FROM VV.FECHA) || EXTRACT (MONTH FROM VV.FECHA)) AS VAL
		FROM COLSUBSIDIO_IDN.TBL_VARIABLES_VITALES_HIST_SEGM VV
		LEFT JOIN 
			( -- Pone en columnas cada una de las categorías contando los afiliados por empresa
				SELECT 
				    ID_EMPRESA,
				    FECHA_AF,
				    CODIGO_PIRAMIDE_2,
				    COUNT(CASE WHEN CATEGORIA = 'A' THEN VAL ELSE NULL END) AS CategoriaA,
				    COUNT(CASE WHEN CATEGORIA = 'B' THEN VAL ELSE NULL END) AS CategoriaB,
				    COUNT(CASE WHEN CATEGORIA = 'C' THEN VAL ELSE NULL END) AS CategoriaC,  
				    
				    COUNT(CASE WHEN CATEGORIA = 'A' THEN VAL ELSE NULL END) + 
				    	COUNT(CASE WHEN CATEGORIA = 'B' THEN VAL ELSE NULL END) +
				    	COUNT(CASE WHEN CATEGORIA = 'C' THEN VAL ELSE NULL END) AS TOTAL,
				    	
				    SUM(CASE WHEN CATEGORIA = 'A' THEN SALARIO ELSE 0 END) AS SalCategoriaA,
				    SUM(CASE WHEN CATEGORIA = 'B' THEN SALARIO ELSE 0 END) AS SalCategoriaB,
				    SUM(CASE WHEN CATEGORIA = 'C' THEN SALARIO ELSE 0 END) AS SalCategoriaC,
				    
				    SUM(CASE WHEN CATEGORIA = 'A' THEN SALARIO ELSE 0 END) + 
					    SUM(CASE WHEN CATEGORIA = 'B' THEN SALARIO ELSE 0 END) +
					    SUM(CASE WHEN CATEGORIA = 'C' THEN SALARIO ELSE 0 END) AS TOTAL_SALARIOS,
					
					COUNT(CASE WHEN CODIGO_SEGMENTO_POBLACIONAL = 1 THEN CODIGO_SEGMENTO_POBLACIONAL ELSE NULL END) AS SEGM_BASICO,
					COUNT(CASE WHEN CODIGO_SEGMENTO_POBLACIONAL = 2 THEN CODIGO_SEGMENTO_POBLACIONAL ELSE NULL END) AS SEGM_MEDIO,
					COUNT(CASE WHEN CODIGO_SEGMENTO_POBLACIONAL = 3 THEN CODIGO_SEGMENTO_POBLACIONAL ELSE NULL END) AS SEGM_JOVEN,
					COUNT(CASE WHEN CODIGO_SEGMENTO_POBLACIONAL = 4 THEN CODIGO_SEGMENTO_POBLACIONAL ELSE NULL END) AS SEGM_ALTO
				FROM ( -- Query que cuenta los registros por categoria agrupando por empresa y fecha
				    SELECT 
				    	TO_VARCHAR(YEAR_EVENT) || TO_VARCHAR(MES) AS FECHA_AF,
				        ID_EMPRESA,
				        CATEGORIA,
				        SALARIO,
				        CODIGO_SEGMENTO_POBLACIONAL,
				        CODIGO_PIRAMIDE_2,
				        COUNT(*) OVER (PARTITION BY CATEGORIA ORDER BY ID_EMPRESA, TO_VARCHAR(YEAR_EVENT) || TO_VARCHAR(MES), CATEGORIA) AS VAL,
				        SUM(SALARIO) OVER (PARTITION BY CATEGORIA ORDER BY ID_EMPRESA, TO_VARCHAR(YEAR_EVENT) || TO_VARCHAR(MES), CATEGORIA) AS SALARIOS
				    FROM COLSUBSIDIO_IDN.TBL_AFILIADOS_HIST_SEGM
				    WHERE YEAR_EVENT >= 2022			    
				) AS SubConsulta
				GROUP BY ID_EMPRESA, FECHA_AF, CODIGO_PIRAMIDE_2
				ORDER BY ID_EMPRESA
			) CAT
		ON VV.ID_EMPRESA = CAT.ID_EMPRESA
			AND EXTRACT (YEAR FROM VV.FECHA) || EXTRACT (MONTH FROM VV.FECHA) = CAT.FECHA_AF
		LEFT JOIN COLSUBSIDIO_IDN.V_LIST_EMPRESAS_SEGM LE
			ON LE.ID_EMP_FILIAL = VV.ID_EMPRESA
		WHERE TO_INT(EXTRACT (YEAR FROM VV.FECHA)) >= 2022
		ORDER BY VV.ID_EMPRESA, VV.FECHA
	)
	, SinDuplicados AS ( -- Elimina los duplicados de query GENERAL ya que al hacer el JOIN se duplican los registros
		SELECT * 
		FROM CTE
		WHERE VAL = 1
	)
	,
	Conteo AS ( -- Del query limpio sin duplicados se cuentan cuántas veces aparecen las empresas y se dejan las que tengan aportes
				-- regulares, es decir, que en los dos años de datos hayan hecho aportes mensualmente
	    SELECT 
	        ID_EMPRESA,
	        COUNT(*) AS NumeroRegistros
	    FROM SinDuplicados
	    GROUP BY ID_EMPRESA
	    HAVING COUNT(*) >= 24
	) -- Query FINAL donde se hace el JOIN entre el query sin duplicados y las empresas con hasta 2 años de aportes
	SELECT SD.*
	FROM SinDuplicados SD
	JOIN Conteo ON SD.ID_EMPRESA = Conteo.ID_EMPRESA
	ORDER BY SD.ID_EMPRESA, SD.FECHA_VAR_VITAL
	;


--------------------------------------------------------------------------------------------------------------------------------

SELECT FECHA_CARGUE, 'TBL_EVENTOS_ASISTENTES_SF' AS TABLA, COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_EVENTOS_ASISTENTES_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_EVENTOS_EMPRESAS_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_EVENTOS_EMPRESAS_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_VARIABLES_VITALES_SALESFORCE', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_VARIABLES_VITALES_SALESFORCE GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_VENTA_EMPRESARIAL_LECTURA_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_VENTA_EMPRESARIAL_LECTURA_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_ALIADOS_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_ALIADOS_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_CAMPAÑAS_CORPORATIVAS_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN."TBL_CAMPAÑAS_CORPORATIVAS_SF" GROUP BY FECHA_CARGUE UNION ALL
--SELECT FECHA_CARGUE, 'TBL_CAMPAÑAS_EMPRESARIALES_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN."TBL_CAMPAÑAS_EMPRESARIALES_SF" GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_DESARROLLO_EMPRESARIAL_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_DESARROLLO_EMPRESARIAL_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_EMPLEABILIDAD_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_EMPLEABILIDAD_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_FORMACION_EMP_FOSFEC_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_FORMACION_EMP_FOSFEC_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_LICITACION_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_LICITACION_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_VENTA_INDIVIDUAL_COTIZACION_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_VENTA_INDIVIDUAL_COTIZACION_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_CUENTAS_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN."TBL_CUENTAS_SF" GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_CUENTAS_PERSONAL_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_CUENTAS_PERSONAL_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_CONTACTOS_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_CONTACTOS_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_RIESGO_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_RIESGO_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_ATRACCION_VISITAS_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_ATRACCION_VISITAS_SF GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'T_CARTERIZACION_SF_STG', COUNT(1) AS CANT FROM COLSUBSIDIO_IDN.T_CARTERIZACION_STG GROUP BY FECHA_CARGUE UNION ALL
SELECT FECHA_CARGUE, 'TBL_PAZYSALVOS_FUGA_SF', COUNT(*) AS CANT FROM COLSUBSIDIO_IDN.TBL_PAZYSALVOS_FUGA_SF GROUP BY FECHA_CARGUE
ORDER BY 2, FECHA_CARGUE DESC
;

SELECT * FROM COLSUBSIDIO_IDN.T_CARTERIZACION_STG;

/*====================================================================================================*/
/*====================================================================================================*/
/*====================================================================================================*/


SELECT DISTINCT SUBSTRING(ID_PERSONA,0,2) FROM COLSUBSIDIO_SSS.VW_CSV_CLIENTES_CONSUMO vccc;

SELECT * FROM COLSUBSIDIO_SSS.VW_CSV_CLIENTES_CONSUMO vccc; 
SELECT * FROM COLSUBSIDIO_SSS.VW_CSV_CLIENTES_CONSUMO;


SELECT 
	*
FROM COLSUBSIDIO_IDN.TBL_EMIS_EMPRESAS 
;

SELECT GRANTEE, PRIVILEGE, OBJECT_NAME
FROM GRANTED_PRIVILEGES
WHERE OBJECT_TYPE = 'TABLE'
  AND SCHEMA_NAME = 'COLSUBSIDIO_IDN'
ORDER BY GRANTEE, OBJECT_NAME;

SELECT * FROM COLSUBSIDIO_IDN.TBL_PRELIM_FOSYGA_SEGM;
WHERE TABLE_NAME = 'TBL_HISTORIAL_BETTERFLY_VAL'
ORDER BY UPDATE_TIME DESC
;

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

WITH CTE AS (
	WITH COMPRA_MENSUAL AS (
		SELECT "Grupo5", 
			CASE 
				WHEN UES = 'SUPERMERCADOS' OR UES ='Supermercados' THEN 'SUPERMERCADOS'
				WHEN UES = 'VIVIENDA' OR UES ='Vivienda' THEN 'VIVIENDA'
				WHEN UES = 'SEGUROS' OR UES ='Seguros' THEN 'SEGUROS'
				WHEN UES = 'CREDITO' OR UES ='Credito' THEN 'CREDITO'
				ELSE UES
			END AS UES,
			"Linea", TO_INTEGER("year_val") AS ANIO,
			CASE
				WHEN "month_name" = 'Enero' THEN '1'
				WHEN "month_name" = 'Febrero' OR "month_name" = 'Febero' THEN '2'
				WHEN "month_name" = 'Marzo' THEN '3'
				WHEN "month_name" = 'Abril' THEN '4'
				WHEN "month_name" = 'Mayo' THEN '5'
				WHEN "month_name" = 'Junio' THEN '6'
				WHEN "month_name" = 'Julio' THEN '7'
				WHEN "month_name" = 'Agosto' THEN '8'
				WHEN "month_name" = 'Septiembre' THEN '9'
				WHEN "month_name" = 'Octubre' THEN '10'
				WHEN "month_name" = 'Noviembre' THEN '11'
				WHEN "month_name" = 'Diciembre' THEN '12'
				ELSE "month_name"
			END	AS "month_name",
			SUM(TO_INTEGER("Cantidad")) AS TotalMensual 
		FROM COLSUBSIDIO_IDN.TBL_HISTORICO_CONSUMO_INDIVIDUAL
		WHERE "year_val" IN('2021', '2022', '2023')
			AND "Grupo5" IS NOT NULL OR "Grupo5" <> ''
		GROUP BY "Grupo5", UES, "Linea", "month_name", "year_val"
		ORDER BY 1 DESC, TO_INT("year_val") ASC, "month_name"
	)
	, COMPRA_ANUAL AS (
		SELECT 
	        "Grupo5",
	        ANIO,
	        SUM(TotalMensual) AS TotalAnual
	    FROM COMPRA_MENSUAL
	    GROUP BY "Grupo5", ANIO
	)
	, FRECUENCIA_COMPRA AS(
		SELECT
	        "Grupo5",
	        COUNT(DISTINCT ANIO * 12 + "month_name") AS FrecuenciaMensual
	    FROM COMPRA_MENSUAL
	    GROUP BY "Grupo5"
	)
	SELECT 
	    cm."Grupo5",
	    cm.UES, 
	    cm."Linea",
	    AVG(cm.TotalMensual) AS PromedioMensual,
	    AVG(ca.TotalAnual) AS PromedioAnual,
	    fc.FrecuenciaMensual    
	FROM COMPRA_MENSUAL cm
	JOIN COMPRA_ANUAL ca ON cm."Grupo5" = ca."Grupo5" AND cm.ANIO = ca.ANIO
	JOIN FRECUENCIA_COMPRA fc ON cm."Grupo5" = fc."Grupo5"
	GROUP BY cm."Grupo5", cm.UES, cm."Linea", fc.FrecuenciaMensual
	ORDER BY "Grupo5" DESC, UES, "Linea"
)
SELECT 
	UES,
	TO_DECIMAL(AVG(PROMEDIOMENSUAL), 5, 2) AS "PromedioMensual",
	TO_DECIMAL(AVG(PROMEDIOANUAL), 5, 2) AS "PromedioAnual",
	TO_DECIMAL(AVG(FrecuenciaMensual), 5, 2) AS "FrecuenciaMensual"
FROM CTE
GROUP BY UES
;

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

CREATE LOCAL TEMPORARY TABLE COLSUBSIDIO_IDN.#TEMP_TBL_RECAUDO_HISTORICO
("tx_nit_empresa" NVARCHAR(5000),
"id_empresa" NVARCHAR(5000),
"tipo_documento" NVARCHAR(5000),
"documento_con_digito" NVARCHAR(5000))
;

CREATE LOCAL TEMPORARY TABLE COLSUBSIDIO_IDN.#TEMP_TBL_RECAUDO_HISTORICO_TODO
("tx_nit_empresa" NVARCHAR(5000),
"aportante" NVARCHAR(5000),
"planilla" NVARCHAR(5000),
"periodo_pago" NVARCHAR(5000),
"valor_planilla" NVARCHAR(5000),
"anio" INTEGER,
"mes" NVARCHAR(5000),
"fuente" NVARCHAR(5000),
"fecha_archivo" LONGDATE,
"fecha_recaudo" NVARCHAR(5000),
"id_empresa" NVARCHAR(5000),
"tipo_documento" NVARCHAR(5000),
"documento_con_digito" NVARCHAR(5000))
;

INSERT INTO COLSUBSIDIO_IDN.#TEMP_TBL_RECAUDO_HISTORICO
SELECT DISTINCT
	"tx_nit_empresa"
    ,"id_empresa"
	,"tipo_documento" 
    ,"documento_con_digito"
FROM 
    COLSUBSIDIO_IDN.TBL_RECAUDO_HISTORICO B
    WHERE 
    B."id_empresa" IS NOT NULL 
    AND B."id_empresa" NOT LIKE '%nulo%'
ORDER BY 1
;


INSERT INTO COLSUBSIDIO_IDN.#TEMP_TBL_RECAUDO_HISTORICO_TODO
SELECT * FROM COLSUBSIDIO_IDN.TBL_RECAUDO_HISTORICO B
;

-- Verificar los datos en la tabla temporal
SELECT * FROM COLSUBSIDIO_IDN.#TEMP_TBL_RECAUDO_HISTORICO;
SELECT * FROM COLSUBSIDIO_IDN.#TEMP_TBL_RECAUDO_HISTORICO_TODO;
SELECT * FROM COLSUBSIDIO_IDN.TBL_RECAUDO_HISTORICO;


--Consulta de actualización
UPDATE COLSUBSIDIO_IDN.TBL_RECAUDO_HISTORICO A--#TEMP_TBL_RECAUDO_HISTORICO_TODO A
SET 
    A."documento_con_digito" = (
        SELECT 
            sub."documento_con_digito"
        FROM 
            (
                SELECT 
                    B."documento_con_digito",
                    ROW_NUMBER() OVER (PARTITION BY B."tx_nit_empresa" ORDER BY B."tx_nit_empresa") AS rnum
                FROM 
                    COLSUBSIDIO_IDN.#TEMP_TBL_RECAUDO_HISTORICO B
                WHERE                     
                    A."tx_nit_empresa" = B."tx_nit_empresa"
            ) AS sub
        WHERE 
            sub.rnum = 1
    )
WHERE 
    EXTRACT(YEAR FROM A."fecha_archivo") = 2024
    AND (A."documento_con_digito" IS NULL OR A."documento_con_digito" LIKE '%nulo%')
;




SELECT DISTINCT
	"tx_nit_empresa"
    ,"id_empresa"
	,"tipo_documento" 
    ,"documento_con_digito"
FROM 
    COLSUBSIDIO_IDN.TBL_RECAUDO_HISTORICO B --#TEMP_TBL_RECAUDO_HISTORICO_TODO B
WHERE 
    B."id_empresa" IS NOT NULL 
    OR B."id_empresa" NOT LIKE '%nulo%'
ORDER BY 1
;
  
